
















// <auto-generated />
namespace Microsoft.Data.SQLite
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.Data.SQLite.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// The argument '{argumentName}' cannot be null, empty or contain only white space.
        /// </summary>
        internal static string ArgumentIsNullOrWhitespace
        {
            get { return GetString("ArgumentIsNullOrWhitespace"); }
        }

        /// <summary>
        /// The argument '{argumentName}' cannot be null, empty or contain only white space.
        /// </summary>
        internal static string FormatArgumentIsNullOrWhitespace(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentIsNullOrWhitespace", "argumentName"), argumentName);
        }

        /// <summary>
        /// {methodName} can only be called when the connection is open.
        /// </summary>
        internal static string CallRequiresOpenConnection
        {
            get { return GetString("CallRequiresOpenConnection"); }
        }

        /// <summary>
        /// {methodName} can only be called when the connection is open.
        /// </summary>
        internal static string FormatCallRequiresOpenConnection(object methodName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CallRequiresOpenConnection", "methodName"), methodName);
        }

        /// <summary>
        /// CommandText must be set before {methodName} can be called.
        /// </summary>
        internal static string CallRequiresSetCommandText
        {
            get { return GetString("CallRequiresSetCommandText"); }
        }

        /// <summary>
        /// CommandText must be set before {methodName} can be called.
        /// </summary>
        internal static string FormatCallRequiresSetCommandText(object methodName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CallRequiresSetCommandText", "methodName"), methodName);
        }

        /// <summary>
        /// The SQLiteParameter is already contained by another SQLiteParameterCollection.
        /// </summary>
        internal static string CollectionIsNotParent
        {
            get { return GetString("CollectionIsNotParent"); }
        }

        /// <summary>
        /// The SQLiteParameter is already contained by another SQLiteParameterCollection.
        /// </summary>
        internal static string FormatCollectionIsNotParent()
        {
            return GetString("CollectionIsNotParent");
        }

        /// <summary>
        /// The SQLiteParameter is already contained by this SQLiteParameterCollection.
        /// </summary>
        internal static string CollectionIsParent
        {
            get { return GetString("CollectionIsParent"); }
        }

        /// <summary>
        /// The SQLiteParameter is already contained by this SQLiteParameterCollection.
        /// </summary>
        internal static string FormatCollectionIsParent()
        {
            return GetString("CollectionIsParent");
        }

        /// <summary>
        /// ConnectionString cannot be set when the connection is open.
        /// </summary>
        internal static string ConnectionStringRequiresClosedConnection
        {
            get { return GetString("ConnectionStringRequiresClosedConnection"); }
        }

        /// <summary>
        /// ConnectionString cannot be set when the connection is open.
        /// </summary>
        internal static string FormatConnectionStringRequiresClosedConnection()
        {
            return GetString("ConnectionStringRequiresClosedConnection");
        }

        /// <summary>
        /// Invalid attempt to {operation} when reader is closed.
        /// </summary>
        internal static string DataReaderClosed
        {
            get { return GetString("DataReaderClosed"); }
        }

        /// <summary>
        /// Invalid attempt to {operation} when reader is closed.
        /// </summary>
        internal static string FormatDataReaderClosed(object operation)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DataReaderClosed", "operation"), operation);
        }

        /// <summary>
        /// The CommandType '{commandType}' is invalid.
        /// </summary>
        internal static string InvalidCommandType
        {
            get { return GetString("InvalidCommandType"); }
        }

        /// <summary>
        /// The CommandType '{commandType}' is invalid.
        /// </summary>
        internal static string FormatInvalidCommandType(object commandType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidCommandType", "commandType"), commandType);
        }

        /// <summary>
        /// Invalid '{keyword}' value in the connection string: {value}.
        /// </summary>
        internal static string InvalidConnectionOptionValue
        {
            get { return GetString("InvalidConnectionOptionValue"); }
        }

        /// <summary>
        /// Invalid '{keyword}' value in the connection string: {value}.
        /// </summary>
        internal static string FormatInvalidConnectionOptionValue(object keyword, object value)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidConnectionOptionValue", "keyword", "value"), keyword, value);
        }

        /// <summary>
        /// The IsolationLevel '{isolationLevel}' is invalid.
        /// </summary>
        internal static string InvalidIsolationLevel
        {
            get { return GetString("InvalidIsolationLevel"); }
        }

        /// <summary>
        /// The IsolationLevel '{isolationLevel}' is invalid.
        /// </summary>
        internal static string FormatInvalidIsolationLevel(object isolationLevel)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidIsolationLevel", "isolationLevel"), isolationLevel);
        }

        /// <summary>
        /// The ParameterDirection '{direction}' is invalid.
        /// </summary>
        internal static string InvalidParameterDirection
        {
            get { return GetString("InvalidParameterDirection"); }
        }

        /// <summary>
        /// The ParameterDirection '{direction}' is invalid.
        /// </summary>
        internal static string FormatInvalidParameterDirection(object direction)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidParameterDirection", "direction"), direction);
        }

        /// <summary>
        /// Keyword not supported: '{keyword}'.
        /// </summary>
        internal static string KeywordNotSupported
        {
            get { return GetString("KeywordNotSupported"); }
        }

        /// <summary>
        /// Keyword not supported: '{keyword}'.
        /// </summary>
        internal static string FormatKeywordNotSupported(object keyword)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("KeywordNotSupported", "keyword"), keyword);
        }

        /// <summary>
        /// There is already an open DataReader associated with this Command which must be closed first.
        /// </summary>
        internal static string OpenReaderExists
        {
            get { return GetString("OpenReaderExists"); }
        }

        /// <summary>
        /// There is already an open DataReader associated with this Command which must be closed first.
        /// </summary>
        internal static string FormatOpenReaderExists()
        {
            return GetString("OpenReaderExists");
        }

        /// <summary>
        /// ConnectionString must be set before Open can be called.
        /// </summary>
        internal static string OpenRequiresSetConnectionString
        {
            get { return GetString("OpenRequiresSetConnectionString"); }
        }

        /// <summary>
        /// ConnectionString must be set before Open can be called.
        /// </summary>
        internal static string FormatOpenRequiresSetConnectionString()
        {
            return GetString("OpenRequiresSetConnectionString");
        }

        /// <summary>
        /// A SQLiteParameter with ParameterName '{parameterName}' is not contained by this SQLiteParameterCollection.
        /// </summary>
        internal static string ParameterNotFound
        {
            get { return GetString("ParameterNotFound"); }
        }

        /// <summary>
        /// A SQLiteParameter with ParameterName '{parameterName}' is not contained by this SQLiteParameterCollection.
        /// </summary>
        internal static string FormatParameterNotFound(object parameterName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ParameterNotFound", "parameterName"), parameterName);
        }

        /// <summary>
        /// {propertyName} must be set.
        /// </summary>
        internal static string RequiresSet
        {
            get { return GetString("RequiresSet"); }
        }

        /// <summary>
        /// {propertyName} must be set.
        /// </summary>
        internal static string FormatRequiresSet(object propertyName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RequiresSet", "propertyName"), propertyName);
        }

        /// <summary>
        /// No mapping exists from object type {typeName} to a known managed provider native type.
        /// </summary>
        internal static string UnknownDataType
        {
            get { return GetString("UnknownDataType"); }
        }

        /// <summary>
        /// No mapping exists from object type {typeName} to a known managed provider native type.
        /// </summary>
        internal static string FormatUnknownDataType(object typeName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnknownDataType", "typeName"), typeName);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);
    
            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
