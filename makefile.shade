use assembly='System.IO.Compression, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
use assembly='System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
use namespace='System.IO.Compression'
use namespace='System.Net.Http'

var VERSION='0.1'
var FULL_VERSION='0.1'
var AUTHORS='Microsoft Open Technologies, Inc.'

use-standard-lifecycle
k-standard-goals

#test-coreclr target='xunit-test' if='IsMono'
    @{
        K("test -parallel none", "test/Microsoft.Data.Sqlite.Tests", "default -r CoreCLR");
    }

#test-x64 target='xunit-test' if='!IsMono'
    @{
        K("test -parallel none", "test/Microsoft.Data.Sqlite.Tests", "default -r clr -arch x64");
        K("test -parallel none", "test/Microsoft.Data.Sqlite.Tests", "default -r coreclr -arch x64");
    }

#sqlite-download target='initialize'
    @{
        DownloadAndExtract(
            "https://sqlite.org/2015/sqlite-dll-win32-x86-3081101.zip",
            Tuple.Create("sqlite3.dll", "src/Microsoft.Data.Sqlite/runtimes/win-x86/native/sqlite3.dll"),
            Tuple.Create("sqlite3.dll", "src/Microsoft.Data.Sqlite/runtimes/win/native/x86/sqlite3.dll"));
        DownloadAndExtract(
            "https://sqlite.org/2015/sqlite-uap-3081101.vsix",
            Tuple.Create("Redist/Retail/x86/sqlite3.dll", "src/Microsoft.Data.Sqlite/runtimes/win10-x86/native/sqlite3.dll"),
            Tuple.Create("Redist/Retail/x64/sqlite3.dll", "src/Microsoft.Data.Sqlite/runtimes/win10-x64/native/sqlite3.dll"),
            Tuple.Create("Redist/Retail/ARM/sqlite3.dll", "src/Microsoft.Data.Sqlite/runtimes/win10-arm/native/sqlite3.dll"));
        DownloadAndExtract(
            "http://system.data.sqlite.org/blobs/1.0.98.0/sqlite-netFx451-static-binary-x64-2013-1.0.98.0.zip",
            Tuple.Create("SQLite.Interop.dll", "src/Microsoft.Data.Sqlite/runtimes/win/native/x64/sqlite3.dll"));
    }

functions
    @{
        void DownloadAndExtract(
            string uri,
            params Tuple<string, string>[] files)
        {
            if(files.All(file => File.Exists(file.Item2)))
            {
                return;
            }

            var tmpFile = "temp.zip";
            using (var webClient = new WebClient())
            {
                webClient.DownloadFile(uri, tmpFile);
            }
            using (var fileStream = new FileStream(tmpFile, FileMode.Open))
            using (var archive = new ZipArchive(fileStream))
            {
                foreach (var file in files)
                {
                    var entry = archive.GetEntry(file.Item1);
                    if (entry == null)
                        throw new FileNotFoundException("Could not find file '" + file.Item1 + "'.");

                    Directory.CreateDirectory(Path.GetDirectoryName(file.Item2));

                    using (var entryStream = entry.Open())
                    using (var dllStream = File.OpenWrite(file.Item2))
                    {
                        entryStream.CopyTo(dllStream);
                    }
                }
            }
            File.Delete(tmpFile);
        }
    }